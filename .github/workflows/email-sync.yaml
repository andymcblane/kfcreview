name: Email Sync and PR Creation

on:
  push:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-emails:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-2
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    - name: Sync emails from S3
      run: |
        # Ensure .emails directory exists
        mkdir -p .emails
        
        # Create a backup of current emails to compare
        cp -r .emails .emails_backup 2>/dev/null || mkdir -p .emails_backup
        
        # Sync emails from S3 bucket
        aws s3 sync s3://kfcreview-emails/ .emails/ --exclude "*" --include "*"
        
        # Check for new files (not previously committed)
        git add .emails/
        new_files=$(git diff --cached --name-only --diff-filter=A .emails/ | wc -l)
        modified_files=$(git diff --cached --name-only --diff-filter=M .emails/ | wc -l)
        
        echo "New files: $new_files"
        echo "Modified files: $modified_files"
        
        if [ "$new_files" -gt 0 ] || [ "$modified_files" -gt 0 ]; then
          echo "NEW_EMAILS=true" >> $GITHUB_ENV
          echo "New or modified emails detected"
          
          # Create list of new email files for processing
          git diff --cached --name-only --diff-filter=A .emails/ > new_email_files.txt
          echo "NEW_EMAIL_FILES<<EOF" >> $GITHUB_ENV
          cat new_email_files.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "NEW_EMAILS=false" >> $GITHUB_ENV
          echo "No new emails found"
        fi
        
        # Reset staging area
        git reset HEAD .emails/

    - name: Generate branch name from email hash
      if: env.NEW_EMAILS == 'true'
      run: |
        # Generate hash from email file contents to ensure consistency
        CONTENT_HASH=""
        if [ -f "new_email_files.txt" ] && [ -s "new_email_files.txt" ]; then
          # Create a hash based on the filenames and file sizes of new emails
          # This ensures the same set of emails always generates the same hash
          HASH_INPUT=""
          while read -r email_file; do
            if [ -f "$email_file" ]; then
              filename=$(basename "$email_file")
              filesize=$(stat -c%s "$email_file" 2>/dev/null || stat -f%z "$email_file" 2>/dev/null || wc -c < "$email_file")
              HASH_INPUT="${HASH_INPUT}${filename}:${filesize}:"
            fi
          done < new_email_files.txt
          
          # Generate SHA256 hash and take first 12 characters
          CONTENT_HASH=$(echo -n "$HASH_INPUT" | sha256sum | cut -c1-12)
          echo "Hash input: $HASH_INPUT"
          echo "Generated hash: $CONTENT_HASH"
        else
          # Fallback to timestamp if no files
          CONTENT_HASH=$(date '+%Y%m%d%H%M%S')
        fi
        
        BRANCH_NAME="email-sync-$CONTENT_HASH"
        TIMESTAMP="$(date '+%Y-%m-%d %H:%M UTC')"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "Generated branch name: $BRANCH_NAME"
        echo "Generated timestamp: $TIMESTAMP"

    - name: Process emails with Python script
      if: env.NEW_EMAILS == 'true'
      run: |
        # Check Python availability
        python3 --version || python --version
        
        # Get list of new email files and process them
        if [ -f "new_email_files.txt" ] && [ -s "new_email_files.txt" ]; then
          echo "Processing new email files:"
          cat new_email_files.txt
          
          # Create initial PR description
          echo "# New KFC Review Emails" > email-summary.md
          echo "" >> email-summary.md
          echo "This PR contains new emails synced from the kfcreview-emails S3 bucket." >> email-summary.md
          echo "" >> email-summary.md
          echo "**ðŸ“§ Email files added:**" >> email-summary.md
          while read -r email_file; do
            if [ -f "$email_file" ]; then
              echo "- \`$(basename "$email_file")\`" >> email-summary.md
            fi
          done < new_email_files.txt
          echo "" >> email-summary.md
          echo "---" >> email-summary.md
          echo "" >> email-summary.md
          
          # Convert emails to markdown using the existing script
          echo "Converting emails to markdown using email_to_markdown.py..."
          
          # Create array of email files
          email_files=()
          while read -r email_file; do
            if [ -f "$email_file" ]; then
              email_files+=("$email_file")
            fi
          done < new_email_files.txt
          
          if [ ${#email_files[@]} -gt 0 ]; then
            # Use the existing email_to_markdown.py script with --combine flag
            python3 email_to_markdown.py --combine "${email_files[@]}" >> email-summary.md 2>/dev/null || \
            python email_to_markdown.py --combine "${email_files[@]}" >> email-summary.md
            echo "Email processing completed"
          else
            echo "No valid email files found to process"
          fi
        else
          echo "No new email files to process"
          echo "# No New Emails" > email-summary.md
          echo "No new emails were found in this sync." >> email-summary.md
        fi

    - name: Create Pull Request
      if: env.NEW_EMAILS == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Add new emails from S3 sync"
        title: "New KFC Review Emails - ${{ env.TIMESTAMP }}"
        body-path: email-summary.md
        branch: ${{ env.BRANCH_NAME }}
        delete-branch: true
        assignees: |
          ${{ github.actor }}

    - name: Clean up
      if: always()
      run: |
        rm -f email-summary.md
        rm -f new_email_files.txt
        rm -rf .emails_backup 